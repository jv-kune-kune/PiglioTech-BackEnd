name: Java CI Pipeline

permissions:
  actions: write
  contents: write
  security-events: write

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build, Test, and Analyze
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # Step 3: Cache SonarQube packages
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: |
            ${{ runner.os }}-sonar

      # Step 4: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 5: Build and Analyze with Maven
      - name: Build and Analyze with SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn clean verify \
          org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=jv-kune-kune_PiglioTech-BackEnd \
          -Dsonar.organization=jv-kune-kune \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      # Step 6: Generate JaCoCo Coverage Report
      - name: Upload JaCoCo Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-coverage-report
          path: target/site/jacoco/

      # Step 7: Perform CodeQL Analysis
      - name: Perform CodeQL Analysis (Initialization)
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: Build Project for CodeQL
        run: |
          export CODEQL_EXTRACTOR_JAVA_TRACER_LOG_LEVEL=INFO
          mvn clean verify

      - name: Perform CodeQL Analysis (Scan)
        uses: github/codeql-action/analyze@v3

      # Step 8: Static Code Analysis with Checkstyle
      - name: Generate Maven Site (includes Checkstyle HTML)
        run: mvn clean site

      - name: Upload Checkstyle Report
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-report
          path: target/site/checkstyle.html

      # Step 9: Dependency Review
      - name: Dependency Review
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          fail-on-severity: low
          fail-on-scopes: runtime
